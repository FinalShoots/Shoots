<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Shoots.mybatis.mapper.PaymentMapper">

    <insert id="insertPayment" >
        insert into payment (
            match_idx, seller_idx, buyer_idx, payment_method, payment_amount,
            payment_date, payment_status, merchant_uid, imp_uid
        )
        values (
            #{match_idx}, #{seller_idx}, #{buyer_idx}, #{payment_method}, #{payment_amount},
            CURRENT_TIMESTAMP, #{payment_status}, #{merchant_uid}, #{imp_uid}
                         );
    </insert>

    <select id="hasPaidForMatch" resultType="boolean">
        SELECT COUNT(*) > 0 FROM payment
        WHERE buyer_idx = #{idx}
          AND match_idx = #{match_idx}
          AND payment_status = 'paid'
    </select>

    <select id="getPlayerCount" resultType="int">
        select COUNT(*) from payment p
        where match_idx = #{match_idx}
        and payment_status = 'paid'
    </select>

    <select id="getPaymentListById" resultType="java.util.HashMap">
        SELECT p.*,
               r.*,
               CASE
                   WHEN p.payment_status = 'refunded' THEN h.action_date
                   ELSE NULL
                   END AS action_date
        FROM payment p
                 LEFT JOIN regular_user r ON p.buyer_idx = r.idx
                 LEFT JOIN payment_history h ON p.payment_idx = h.payment_idx
        WHERE NOT EXISTS (
            SELECT 1
            FROM payment p2
                     LEFT JOIN payment_history h2 ON p2.payment_idx = h2.payment_idx
            WHERE p2.buyer_idx = p.buyer_idx
              AND p2.match_idx = p.match_idx
              AND COALESCE(h2.action_date, p2.payment_date) > COALESCE(h.action_date, p.payment_date)
        )
           OR h.action_date IS NULL
        ORDER BY p.payment_date DESC;

    </select>

    <select id="getPaymentInfoById" resultType="Payment">
        select * from payment where buyer_idx = #{idx} and match_idx = #{match_idx}
        order by payment_date desc LIMIT 1
    </select>

    <select id="getPaymentListByMatchIdx" resultType="Payment">
        select * from payment where match_idx = #{match_idx} and payment_status = 'paid';
    </select>

    <select id="getUserPaymentListByMatchIdx" resultType="java.util.HashMap">
        SELECT p.*, r.*, b.business_name, m.*
        FROM payment p
                 JOIN regular_user r ON p.buyer_idx = r.idx
                 JOIN business_user b ON p.seller_idx = b.business_idx
                 JOIN MATCH_POST m ON p.match_idx = m.match_idx
        WHERE p.match_idx = #{match_idx}
          AND p.payment_status = 'paid';
    </select>


    <select id="getPlayerCountByMonth" resultType="map">
        SELECT
            MONTH(m.match_date) AS month,
            COUNT(p.payment_idx) AS player_count
        FROM
            match_post m
            JOIN
            payment p ON m.match_idx = p.match_idx
        WHERE
            p.payment_status = 'paid'
          AND YEAR(m.match_date) = YEAR(CURDATE())
          AND p.seller_idx = #{business_idx}
        GROUP BY
            MONTH(m.match_date)
        ORDER BY
            month;
    </select>

    <update id="updatePayment">
        update payment set payment_status = 'refunded' where payment_idx = #{payment_idx}
    </update>

    <select id="userPaymentList">
        select p.*, b.address, b.business_name, m.match_time, m.match_date
        from payment p
                 join business_user b on p.seller_idx = b.business_idx
                 join match_post m on p.match_idx = m.match_idx
            where p.buyer_idx = #{id} and payment_status = 'paid'
        order by match_date desc, match_time desc
    </select>

    <select id="getPaymentCount">
        select count(*) from payment where payment_status = 'paid';
    </select>
</mapper>